const GOLD_FALLBACK=75;
export async function onRequestGet(ctx){const{request,env}=ctx;const url=new URL(request.url);const asset=await env.ASSETS.fetch(new Request(new URL('/data/products.json',url.origin)));const base=await asset.json();
const q=(url.searchParams.get('q')||'').toLowerCase();const minPrice=url.searchParams.get('minPrice');const maxPrice=url.searchParams.get('maxPrice');const minPopularity=url.searchParams.get('minPopularity');const sort=url.searchParams.get('sort')||'price';const order=url.searchParams.get('order')||'asc';const page=Number(url.searchParams.get('page')||1);const perPage=Number(url.searchParams.get('perPage')||12);
const gold=GOLD_FALLBACK;let rows=base.map((p,i)=>{const pop=Math.round(p.popularityScore*50)/10;const price=Number(((p.popularityScore+1)*p.weight*gold).toFixed(2));return{id:i+1,...p,popularity5:pop,priceUSD:price}});
if(q)rows=rows.filter(r=>r.name.toLowerCase().includes(q));if(minPopularity!==null)rows=rows.filter(r=> r.popularity5>=Number(minPopularity));if(minPrice!==null)rows=rows.filter(r=> r.priceUSD>=Number(minPrice));if(maxPrice!==null)rows=rows.filter(r=> r.priceUSD<=Number(maxPrice));
const ord=order==='desc'?-1:1;rows.sort((a,b)=>{switch(sort){case'name':return a.name.localeCompare(b.name)*ord;case'popularity':return(a.popularity5-b.popularity5)*ord;case'weight':return(a.weight-b.weight)*ord;case'price':default:return(a.priceUSD-b.priceUSD)*ord}});
const total=rows.length;const start=(page-1)*perPage;const items=rows.slice(start,start+perPage);return new Response(JSON.stringify({meta:{total,page,perPage,goldPriceUSDPerGram:gold},items}),{headers:{'Content-Type':'application/json'}})}